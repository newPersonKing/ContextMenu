package com.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gy.smartbardemo.Movie;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MOVIE".
*/
public class MovieDao extends AbstractDao<Movie, Long> {

    public static final String TABLENAME = "MOVIE";

    /**
     * Properties of entity Movie.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "Url", false, "URL");
        public final static Property MovieName = new Property(2, String.class, "MovieName", false, "MOVIE_NAME");
        public final static Property EMovieName = new Property(3, String.class, "EMovieName", false, "EMOVIE_NAME");
        public final static Property MovieContent = new Property(4, String.class, "MovieContent", false, "MOVIE_CONTENT");
        public final static Property EMovieContent = new Property(5, String.class, "EMovieContent", false, "EMOVIE_CONTENT");
        public final static Property Code = new Property(6, String.class, "code", false, "CODE");
    };


    public MovieDao(DaoConfig config) {
        super(config);
    }
    
    public MovieDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MOVIE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: Url
                "\"MOVIE_NAME\" TEXT," + // 2: MovieName
                "\"EMOVIE_NAME\" TEXT," + // 3: EMovieName
                "\"MOVIE_CONTENT\" TEXT," + // 4: MovieContent
                "\"EMOVIE_CONTENT\" TEXT," + // 5: EMovieContent
                "\"CODE\" TEXT);"); // 6: code
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MOVIE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(2, Url);
        }
 
        String MovieName = entity.getMovieName();
        if (MovieName != null) {
            stmt.bindString(3, MovieName);
        }
 
        String EMovieName = entity.getEMovieName();
        if (EMovieName != null) {
            stmt.bindString(4, EMovieName);
        }
 
        String MovieContent = entity.getMovieContent();
        if (MovieContent != null) {
            stmt.bindString(5, MovieContent);
        }
 
        String EMovieContent = entity.getEMovieContent();
        if (EMovieContent != null) {
            stmt.bindString(6, EMovieContent);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Movie entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Url = entity.getUrl();
        if (Url != null) {
            stmt.bindString(2, Url);
        }
 
        String MovieName = entity.getMovieName();
        if (MovieName != null) {
            stmt.bindString(3, MovieName);
        }
 
        String EMovieName = entity.getEMovieName();
        if (EMovieName != null) {
            stmt.bindString(4, EMovieName);
        }
 
        String MovieContent = entity.getMovieContent();
        if (MovieContent != null) {
            stmt.bindString(5, MovieContent);
        }
 
        String EMovieContent = entity.getEMovieContent();
        if (EMovieContent != null) {
            stmt.bindString(6, EMovieContent);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(7, code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Movie readEntity(Cursor cursor, int offset) {
        Movie entity = new Movie( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // MovieName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // EMovieName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MovieContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // EMovieContent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Movie entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMovieName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEMovieName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMovieContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEMovieContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Movie entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Movie entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
